# Railway-optimized Dockerfile with aggressive memory management
FROM node:18-alpine as frontend-builder

# Set aggressive memory limits for Railway
ENV NODE_OPTIONS="--max-old-space-size=1024"
ENV npm_config_cache=/tmp/.npm
ENV npm_config_prefer_offline=true
ENV npm_config_audit=false
ENV npm_config_progress=false

# Install only essential build tools
RUN apk add --no-cache --virtual .build-deps \
    python3 \
    make \
    g++ \
    && npm install -g npm@8

WORKDIR /app/frontend

# Copy only essential files first
COPY excel-ai-frontend/package*.json ./
COPY excel-ai-frontend/vite.config.js ./
COPY excel-ai-frontend/tailwind.config.js ./
COPY excel-ai-frontend/jsconfig.json ./
COPY excel-ai-frontend/components.json ./

# Install dependencies with maximum memory optimization
RUN npm ci --only=production --prefer-offline --no-audit --progress=false --legacy-peer-deps || \
    npm install --only=production --prefer-offline --no-audit --progress=false --legacy-peer-deps

# Copy source files in chunks to reduce memory usage
COPY excel-ai-frontend/src/ ./src/
COPY excel-ai-frontend/public/ ./public/
COPY excel-ai-frontend/index.html ./

# Build with aggressive memory management
RUN NODE_OPTIONS="--max-old-space-size=1024" npm run build

# Clean up build dependencies
RUN apk del .build-deps

# Python backend
FROM python:3.9-slim as backend

WORKDIR /app

# Install minimal system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Python dependencies
COPY excel_ai_backend/requirements.txt ./
RUN pip install --no-cache-dir --disable-pip-version-check -r requirements.txt

# Copy backend source
COPY excel_ai_backend/ ./

# Copy built frontend
COPY --from=frontend-builder /app/frontend/dist ./src/static/

# Environment variables
ENV FLASK_APP=src/main.py
ENV FLASK_ENV=production
ENV PYTHONPATH=/app
ENV PORT=5000

EXPOSE 5000

# Simple health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=2 \
  CMD curl -f http://localhost:${PORT:-5000}/health || exit 1

# Start command
CMD python -m flask run --host=0.0.0.0 --port=${PORT:-5000}